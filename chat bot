import os
import requests
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# Telegram Bot Token
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# Spotify API credentials
CLIENT_ID = "YOUR_SPOTIFY_CLIENT_ID"
CLIENT_SECRET = "YOUR_SPOTIFY_CLIENT_SECRET"

# Function to handle the /start command
def start(update, context):
    update.message.reply_text("Welcome to Music Bot! Send /music <song_name> to search for music.")

# Function to handle the /music command
def music(update, context):
    query = " ".join(context.args)
    tracks = search_music(query)
    if tracks:
        for track in tracks:
            update.message.reply_text(f"{track['name']} - {track['external_urls']['spotify']}")
    else:
        update.message.reply_text("No music found for your query.")

# Function to search for music using the Spotify API
def search_music(query):
    url = "https://api.spotify.com/v1/search"
    headers = {
        "Authorization": f"Bearer {get_spotify_token()}",
        "Content-Type": "application/json"
    }
    params = {
        "q": query,
        "type": "track"
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        tracks = data.get('tracks', {}).get('items', [])
        return tracks[:5] if tracks else None
    else:
        return None

# Function to get access token from Spotify API
def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Authorization": "Basic " + base64.b64encode(f"{CLIENT_ID}:{CLIENT_SECRET}".encode()).decode(),
    }
    data = {
        "grant_type": "client_credentials"
    }
    response = requests.post(url, headers=headers, data=data)
    if response.status_code == 200:
        return response.json().get("access_token")
    else:
        return None

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("music", music))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
